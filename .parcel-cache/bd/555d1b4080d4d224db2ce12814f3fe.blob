/* src/App.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponentDev,
	add_location,
	add_render_callback,
	append_dev,
	attr_dev,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	globals,
	init,
	insert_dev,
	is_function,
	listen_dev,
	noop,
	run_all,
	safe_not_equal,
	select_option,
	select_value,
	set_data_dev,
	set_style,
	space,
	text,
	validate_each_argument,
	validate_slots
} from "svelte/internal";

const { Object: Object_1 } = globals;
import Roll from "roll";
import { adjust, difference, reduce } from "ramda";
import * as characterClasses from "./characterClasses";
import { calculatePrimeRequisiteModifierDisplay } from "./derivedStatisticUtil";
const file = "src/App.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	child_ctx[25] = i;
	return child_ctx;
}

// (130:6) {#each selectedCharacterClass === null ? availableCharacterClasses : [selectedCharacterClass] as cc, idx}
function create_each_block_2(ctx) {
	let tr;
	let td0;
	let t0_value = /*cc*/ ctx[23].name + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*cc*/ ctx[23].armor + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*cc*/ ctx[23].weapons + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*cc*/ ctx[23].hitDice + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*cc*/ ctx[23].languages.join(", ") + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*cc*/ ctx[23].specialAbilities.join(", ") + "";
	let t10;
	let t11;
	let td6;
	let t12_value = calculatePrimeRequisiteModifierDisplay(/*cc*/ ctx[23].primeRequisiteModifier, /*rolledAbilities*/ ctx[4]) + "";
	let t12;
	let t13;
	let tr_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			attr_dev(td0, "class", "p-4 font-bold");
			set_style(td0, "font-family", "ScalaSans-Regular");
			add_location(td0, file, 138, 10, 4122);
			attr_dev(td1, "class", "p-4");
			set_style(td1, "margin-top", "2px");
			add_location(td1, file, 141, 10, 4237);
			attr_dev(td2, "class", "p-4");
			add_location(td2, file, 142, 10, 4304);
			attr_dev(td3, "class", "p-4");
			add_location(td3, file, 143, 10, 4348);
			attr_dev(td4, "class", "p-4");
			add_location(td4, file, 144, 10, 4392);
			attr_dev(td5, "class", "p-4");
			add_location(td5, file, 145, 10, 4449);
			attr_dev(td6, "class", "p-4");
			add_location(td6, file, 146, 10, 4513);

			attr_dev(tr, "class", tr_class_value = `${/*idx*/ ctx[25] % 2 === 0 ? "bg-mint" : ""} ${/*selectedCharacterClass*/ ctx[0] === null
			? "cursor-pointer hover:bg-dark-gray text-dark-gray hover:text-white"
			: ""}`);

			add_location(tr, file, 130, 8, 3829);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);

			if (!mounted) {
				dispose = listen_dev(
					tr,
					"click",
					function () {
						if (is_function(/*onSelectCharacterClass*/ ctx[6](/*cc*/ ctx[23].name))) /*onSelectCharacterClass*/ ctx[6](/*cc*/ ctx[23].name).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*selectedCharacterClass*/ 1 && t0_value !== (t0_value = /*cc*/ ctx[23].name + "")) set_data_dev(t0, t0_value);
			if (dirty & /*selectedCharacterClass*/ 1 && t2_value !== (t2_value = /*cc*/ ctx[23].armor + "")) set_data_dev(t2, t2_value);
			if (dirty & /*selectedCharacterClass*/ 1 && t4_value !== (t4_value = /*cc*/ ctx[23].weapons + "")) set_data_dev(t4, t4_value);
			if (dirty & /*selectedCharacterClass*/ 1 && t6_value !== (t6_value = /*cc*/ ctx[23].hitDice + "")) set_data_dev(t6, t6_value);
			if (dirty & /*selectedCharacterClass*/ 1 && t8_value !== (t8_value = /*cc*/ ctx[23].languages.join(", ") + "")) set_data_dev(t8, t8_value);
			if (dirty & /*selectedCharacterClass*/ 1 && t10_value !== (t10_value = /*cc*/ ctx[23].specialAbilities.join(", ") + "")) set_data_dev(t10, t10_value);
			if (dirty & /*selectedCharacterClass*/ 1 && t12_value !== (t12_value = calculatePrimeRequisiteModifierDisplay(/*cc*/ ctx[23].primeRequisiteModifier, /*rolledAbilities*/ ctx[4]) + "")) set_data_dev(t12, t12_value);

			if (dirty & /*selectedCharacterClass*/ 1 && tr_class_value !== (tr_class_value = `${/*idx*/ ctx[25] % 2 === 0 ? "bg-mint" : ""} ${/*selectedCharacterClass*/ ctx[0] === null
			? "cursor-pointer hover:bg-dark-gray text-dark-gray hover:text-white"
			: ""}`)) {
				attr_dev(tr, "class", tr_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(130:6) {#each selectedCharacterClass === null ? availableCharacterClasses : [selectedCharacterClass] as cc, idx}",
		ctx
	});

	return block;
}

// (158:2) {#if selectedCharacterClass !== null}
function create_if_block_1(ctx) {
	let h2;

	let t0_value = (/*selectedCharacterClass*/ ctx[0] !== null && /*selectedAlignment*/ ctx[1] === null
	? "Choose Alignment"
	: "Alignment") + "";

	let t0;
	let t1;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*selectedAlignment*/ ctx[1] === null) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			if_block.c();
			if_block_anchor = empty();
			set_style(h2, "font-family", "ScalaSans-Regular");
			attr_dev(h2, "class", "pb-2 text-2xl font-bold");
			add_location(h2, file, 158, 4, 4780);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selectedCharacterClass, selectedAlignment*/ 3 && t0_value !== (t0_value = (/*selectedCharacterClass*/ ctx[0] !== null && /*selectedAlignment*/ ctx[1] === null
			? "Choose Alignment"
			: "Alignment") + "")) set_data_dev(t0, t0_value);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(158:2) {#if selectedCharacterClass !== null}",
		ctx
	});

	return block;
}

// (171:4) {:else}
function create_else_block(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*selectedAlignment*/ ctx[1]);
			attr_dev(div, "class", "pb-6");
			add_location(div, file, 171, 6, 5407);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selectedAlignment*/ 2) set_data_dev(t, /*selectedAlignment*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(171:4) {:else}",
		ctx
	});

	return block;
}

// (164:4) {#if selectedAlignment === null}
function create_if_block_2(ctx) {
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let option2;
	let option2_value_value;
	let option3;
	let option3_value_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			select = element("select");
			option0 = element("option");
			option0.textContent = "Select Alignment";
			option1 = element("option");
			option1.textContent = `${"Chaotic"}`;
			option2 = element("option");
			option2.textContent = `${"Neutral"}`;
			option3 = element("option");
			option3.textContent = `${"Lawful"}`;
			attr_dev(option0, "class", "py-1");
			option0.__value = option0_value_value = null;
			option0.value = option0.__value;
			add_location(option0, file, 165, 8, 5111);
			attr_dev(option1, "class", "py-1");
			option1.__value = option1_value_value = "Chaotic";
			option1.value = option1.__value;
			add_location(option1, file, 166, 8, 5179);
			attr_dev(option2, "class", "py-1");
			option2.__value = option2_value_value = "Neutral";
			option2.value = option2.__value;
			add_location(option2, file, 167, 8, 5247);
			attr_dev(option3, "class", "py-1");
			option3.__value = option3_value_value = "Lawful";
			option3.value = option3.__value;
			add_location(option3, file, 168, 8, 5315);
			attr_dev(select, "name", "alignment");
			attr_dev(select, "id", "alignment");
			if (/*selectedAlignment*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[12].call(select));
			add_location(select, file, 164, 6, 5031);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);
			append_dev(select, option0);
			append_dev(select, option1);
			append_dev(select, option2);
			append_dev(select, option3);
			select_option(select, /*selectedAlignment*/ ctx[1]);

			if (!mounted) {
				dispose = listen_dev(select, "change", /*select_change_handler*/ ctx[12]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selectedAlignment*/ 2) {
				select_option(select, /*selectedAlignment*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(164:4) {#if selectedAlignment === null}",
		ctx
	});

	return block;
}

// (177:2) {#if selectedCharacterClass !== null && selectedAlignment !== null}
function create_if_block(ctx) {
	let h2;
	let t1;
	let div6;
	let div5;
	let div0;
	let t2;
	let div3;
	let div1;
	let t4;
	let div2;
	let t5;
	let t6;
	let div4;
	let each_value_1 = difference(/*adjustableAbilities*/ ctx[7], /*selectedCharacterClass*/ ctx[0].primeRequisites);
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*selectedCharacterClass*/ ctx[0].primeRequisites;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Adjust Prime Requisite Abilities";
			t1 = space();
			div6 = element("div");
			div5 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			div3 = element("div");
			div1 = element("div");
			div1.textContent = "Ability Points";
			t4 = space();
			div2 = element("div");
			t5 = text(/*adjustmentPointPool*/ ctx[2]);
			t6 = space();
			div4 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_style(h2, "font-family", "ScalaSans-Regular");
			attr_dev(h2, "class", "pb-2 text-2xl font-bold");
			add_location(h2, file, 177, 4, 5559);
			attr_dev(div0, "class", "flex p-4");
			add_location(div0, file, 182, 8, 5786);
			add_location(div1, file, 204, 10, 6782);
			attr_dev(div2, "class", "font-bold");
			add_location(div2, file, 205, 10, 6818);
			attr_dev(div3, "class", "p-2 text-xl flex flex-col align-middle justify-center");
			add_location(div3, file, 203, 8, 6704);
			attr_dev(div4, "class", "flex p-4");
			add_location(div4, file, 207, 8, 6892);
			attr_dev(div5, "class", "w-auto flex justify-between");
			add_location(div5, file, 181, 6, 5736);
			attr_dev(div6, "class", "w-full flex justify-center");
			add_location(div6, file, 180, 4, 5689);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div5);
			append_dev(div5, div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			append_dev(div5, t2);
			append_dev(div5, div3);
			append_dev(div3, div1);
			append_dev(div3, t4);
			append_dev(div3, div2);
			append_dev(div2, t5);
			append_dev(div5, t6);
			append_dev(div5, div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div4, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*decrementBaseAbility, difference, adjustableAbilities, selectedCharacterClass, adjustedAbilities, incrementBaseAbility*/ 905) {
				each_value_1 = difference(/*adjustableAbilities*/ ctx[7], /*selectedCharacterClass*/ ctx[0].primeRequisites);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*adjustmentPointPool*/ 4) set_data_dev(t5, /*adjustmentPointPool*/ ctx[2]);

			if (dirty & /*decrementPrimeAbility, selectedCharacterClass, adjustedAbilities, incrementPrimeAbility*/ 3081) {
				each_value = /*selectedCharacterClass*/ ctx[0].primeRequisites;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div6);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(177:2) {#if selectedCharacterClass !== null && selectedAlignment !== null}",
		ctx
	});

	return block;
}

// (184:10) {#each difference(adjustableAbilities, selectedCharacterClass.primeRequisites) as ba}
function create_each_block_1(ctx) {
	let div4;
	let div0;
	let t1;
	let div1;
	let t2_value = /*ba*/ ctx[20] + "";
	let t2;
	let t3;
	let div2;
	let t4_value = /*adjustedAbilities*/ ctx[3][/*ba*/ ctx[20]] + "";
	let t4;
	let t5;
	let div3;
	let t7;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div4 = element("div");
			div0 = element("div");
			div0.textContent = "^";
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			t4 = text(t4_value);
			t5 = space();
			div3 = element("div");
			div3.textContent = "^";
			t7 = space();
			attr_dev(div0, "class", "select-none text-center bg-mint hover:bg-dark-gray hover:text-white rounded cursor-pointer text-2xl font-bold");
			add_location(div0, file, 185, 14, 5976);
			attr_dev(div1, "class", "text-xl");
			add_location(div1, file, 191, 14, 6236);
			attr_dev(div2, "class", "text-xl");
			add_location(div2, file, 192, 14, 6282);
			attr_dev(div3, "class", "select-none text-center bg-mint hover:bg-dark-gray hover:text-white rounded cursor-pointer text-2xl font-bold");
			set_style(div3, "transform", "rotate(180deg)");
			add_location(div3, file, 193, 14, 6347);
			attr_dev(div4, "class", "p-2 flex flex-col align-middle");
			add_location(div4, file, 184, 12, 5917);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div4, t1);
			append_dev(div4, div1);
			append_dev(div1, t2);
			append_dev(div4, t3);
			append_dev(div4, div2);
			append_dev(div2, t4);
			append_dev(div4, t5);
			append_dev(div4, div3);
			append_dev(div4, t7);

			if (!mounted) {
				dispose = [
					listen_dev(
						div0,
						"click",
						function () {
							if (is_function(/*incrementBaseAbility*/ ctx[9](/*ba*/ ctx[20]))) /*incrementBaseAbility*/ ctx[9](/*ba*/ ctx[20]).apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(
						div3,
						"click",
						function () {
							if (is_function(/*decrementBaseAbility*/ ctx[8](/*ba*/ ctx[20]))) /*decrementBaseAbility*/ ctx[8](/*ba*/ ctx[20]).apply(this, arguments);
						},
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*selectedCharacterClass*/ 1 && t2_value !== (t2_value = /*ba*/ ctx[20] + "")) set_data_dev(t2, t2_value);
			if (dirty & /*adjustedAbilities, selectedCharacterClass*/ 9 && t4_value !== (t4_value = /*adjustedAbilities*/ ctx[3][/*ba*/ ctx[20]] + "")) set_data_dev(t4, t4_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(184:10) {#each difference(adjustableAbilities, selectedCharacterClass.primeRequisites) as ba}",
		ctx
	});

	return block;
}

// (209:10) {#each selectedCharacterClass.primeRequisites as pr}
function create_each_block(ctx) {
	let div4;
	let div0;
	let t1;
	let div1;
	let t2_value = /*pr*/ ctx[17] + "";
	let t2;
	let t3;
	let div2;
	let t4_value = /*adjustedAbilities*/ ctx[3][/*pr*/ ctx[17]] + "";
	let t4;
	let t5;
	let div3;
	let t7;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div4 = element("div");
			div0 = element("div");
			div0.textContent = "^";
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			t4 = text(t4_value);
			t5 = space();
			div3 = element("div");
			div3.textContent = "^";
			t7 = space();
			attr_dev(div0, "class", "select-none text-center bg-mint hover:bg-dark-gray hover:text-white rounded cursor-pointer text-2xl font-bold");
			add_location(div0, file, 210, 14, 7049);
			attr_dev(div1, "class", "text-xl");
			add_location(div1, file, 216, 14, 7310);
			attr_dev(div2, "class", "text-xl");
			add_location(div2, file, 217, 14, 7356);
			attr_dev(div3, "class", "select-none text-center bg-mint hover:bg-dark-gray hover:text-white rounded cursor-pointer text-2xl font-bold");
			set_style(div3, "transform", "rotate(180deg)");
			add_location(div3, file, 218, 14, 7421);
			attr_dev(div4, "class", "p-2 flex flex-col align-middle");
			add_location(div4, file, 209, 12, 6990);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div4, t1);
			append_dev(div4, div1);
			append_dev(div1, t2);
			append_dev(div4, t3);
			append_dev(div4, div2);
			append_dev(div2, t4);
			append_dev(div4, t5);
			append_dev(div4, div3);
			append_dev(div4, t7);

			if (!mounted) {
				dispose = [
					listen_dev(
						div0,
						"click",
						function () {
							if (is_function(/*incrementPrimeAbility*/ ctx[10](/*pr*/ ctx[17]))) /*incrementPrimeAbility*/ ctx[10](/*pr*/ ctx[17]).apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(
						div3,
						"click",
						function () {
							if (is_function(/*decrementPrimeAbility*/ ctx[11](/*pr*/ ctx[17]))) /*decrementPrimeAbility*/ ctx[11](/*pr*/ ctx[17]).apply(this, arguments);
						},
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*selectedCharacterClass*/ 1 && t2_value !== (t2_value = /*pr*/ ctx[17] + "")) set_data_dev(t2, t2_value);
			if (dirty & /*adjustedAbilities, selectedCharacterClass*/ 9 && t4_value !== (t4_value = /*adjustedAbilities*/ ctx[3][/*pr*/ ctx[17]] + "")) set_data_dev(t4, t4_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(209:10) {#each selectedCharacterClass.primeRequisites as pr}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div22;
	let h1;
	let t1;
	let div20;
	let div19;
	let div2;
	let div0;
	let t3;
	let div1;
	let t5;
	let div5;
	let div3;
	let t7;
	let div4;
	let t9;
	let div9;
	let div8;
	let div6;
	let t11;
	let div7;
	let t13;
	let div12;
	let div10;
	let t15;
	let div11;
	let t17;
	let div15;
	let div13;
	let t19;
	let div14;
	let t21;
	let div18;
	let div16;
	let t23;
	let div17;
	let t25;
	let h2;

	let t26_value = (/*selectedCharacterClass*/ ctx[0] !== null
	? "Character Class"
	: "Choose Available Class") + "";

	let t26;
	let t27;
	let div21;
	let table;
	let thead;
	let tr;
	let th0;
	let t29;
	let th1;
	let t31;
	let th2;
	let t33;
	let th3;
	let t35;
	let th4;
	let t37;
	let th5;
	let t39;
	let th6;
	let t41;
	let t42;
	let t43;

	let each_value_2 = /*selectedCharacterClass*/ ctx[0] === null
	? /*availableCharacterClasses*/ ctx[5]
	: [/*selectedCharacterClass*/ ctx[0]];

	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let if_block0 = /*selectedCharacterClass*/ ctx[0] !== null && create_if_block_1(ctx);
	let if_block1 = /*selectedCharacterClass*/ ctx[0] !== null && /*selectedAlignment*/ ctx[1] !== null && create_if_block(ctx);

	const block = {
		c: function create() {
			div22 = element("div");
			h1 = element("h1");
			h1.textContent = "BX D&D Character Generator";
			t1 = space();
			div20 = element("div");
			div19 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.textContent = "STR";
			t3 = space();
			div1 = element("div");
			div1.textContent = `${/*rolledAbilities*/ ctx[4].STR}`;
			t5 = space();
			div5 = element("div");
			div3 = element("div");
			div3.textContent = "INT";
			t7 = space();
			div4 = element("div");
			div4.textContent = `${/*rolledAbilities*/ ctx[4].INT}`;
			t9 = space();
			div9 = element("div");
			div8 = element("div");
			div6 = element("div");
			div6.textContent = "WIS";
			t11 = space();
			div7 = element("div");
			div7.textContent = `${/*rolledAbilities*/ ctx[4].WIS}`;
			t13 = space();
			div12 = element("div");
			div10 = element("div");
			div10.textContent = "DEX";
			t15 = space();
			div11 = element("div");
			div11.textContent = `${/*rolledAbilities*/ ctx[4].DEX}`;
			t17 = space();
			div15 = element("div");
			div13 = element("div");
			div13.textContent = "CON";
			t19 = space();
			div14 = element("div");
			div14.textContent = `${/*rolledAbilities*/ ctx[4].CON}`;
			t21 = space();
			div18 = element("div");
			div16 = element("div");
			div16.textContent = "CHA";
			t23 = space();
			div17 = element("div");
			div17.textContent = `${/*rolledAbilities*/ ctx[4].CHA}`;
			t25 = space();
			h2 = element("h2");
			t26 = text(t26_value);
			t27 = space();
			div21 = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th0 = element("th");
			th0.textContent = "Class";
			t29 = space();
			th1 = element("th");
			th1.textContent = "Armor";
			t31 = space();
			th2 = element("th");
			th2.textContent = "Weapons";
			t33 = space();
			th3 = element("th");
			th3.textContent = "HD";
			t35 = space();
			th4 = element("th");
			th4.textContent = "Languages";
			t37 = space();
			th5 = element("th");
			th5.textContent = "Special Abilities";
			t39 = space();
			th6 = element("th");
			th6.textContent = "EXP modifier";
			t41 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t42 = space();
			if (if_block0) if_block0.c();
			t43 = space();
			if (if_block1) if_block1.c();
			attr_dev(h1, "class", "text-5xl pt-8 pb-7");
			set_style(h1, "font-family", "BungeeShade");
			add_location(h1, file, 65, 2, 2041);
			add_location(div0, file, 74, 8, 2378);
			add_location(div1, file, 75, 8, 2401);
			attr_dev(div2, "class", "flex flex-col align-middle");
			add_location(div2, file, 73, 6, 2329);
			add_location(div3, file, 80, 8, 2487);
			add_location(div4, file, 81, 8, 2510);
			add_location(div5, file, 79, 6, 2473);
			add_location(div6, file, 87, 10, 2612);
			add_location(div7, file, 88, 10, 2637);
			add_location(div8, file, 86, 8, 2596);
			add_location(div9, file, 85, 6, 2582);
			add_location(div10, file, 94, 8, 2742);
			add_location(div11, file, 95, 8, 2765);
			add_location(div12, file, 93, 6, 2728);
			add_location(div13, file, 100, 8, 2851);
			add_location(div14, file, 101, 8, 2874);
			add_location(div15, file, 99, 6, 2837);
			add_location(div16, file, 106, 8, 2960);
			add_location(div17, file, 107, 8, 2983);
			add_location(div18, file, 105, 6, 2946);
			attr_dev(div19, "class", "w-1/3 flex flex-row justify-between text-2xl");
			add_location(div19, file, 72, 4, 2264);
			attr_dev(div20, "class", "pt-8 pb-16 w-full flex flex-row justify-center");
			set_style(div20, "font-family", "ScalaSans-Regular");
			add_location(div20, file, 68, 2, 2148);
			set_style(h2, "font-family", "ScalaSans-Regular");
			attr_dev(h2, "class", "pb-2 text-2xl font-bold");
			add_location(h2, file, 111, 2, 3051);
			attr_dev(th0, "class", "p-4");
			add_location(th0, file, 120, 10, 3409);
			attr_dev(th1, "class", "p-4");
			add_location(th1, file, 121, 10, 3446);
			attr_dev(th2, "class", "p-4");
			add_location(th2, file, 122, 10, 3483);
			attr_dev(th3, "class", "p-4");
			add_location(th3, file, 123, 10, 3522);
			attr_dev(th4, "class", "p-4");
			add_location(th4, file, 124, 10, 3556);
			attr_dev(th5, "class", "p-4");
			add_location(th5, file, 125, 10, 3597);
			attr_dev(th6, "class", "p-4");
			add_location(th6, file, 126, 10, 3646);
			add_location(tr, file, 119, 8, 3394);
			add_location(thead, file, 118, 6, 3378);
			attr_dev(table, "class", "w-full table-auto");
			set_style(table, "font-family", "ScalaSans-Regular");
			add_location(table, file, 117, 4, 3299);
			attr_dev(div21, "class", "pr-16 pl-16 pb-8 flex flex-row justify-center");
			add_location(div21, file, 116, 2, 3235);
			attr_dev(div22, "class", "text-center text-dark-gray");
			add_location(div22, file, 64, 0, 1998);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div22, anchor);
			append_dev(div22, h1);
			append_dev(div22, t1);
			append_dev(div22, div20);
			append_dev(div20, div19);
			append_dev(div19, div2);
			append_dev(div2, div0);
			append_dev(div2, t3);
			append_dev(div2, div1);
			append_dev(div19, t5);
			append_dev(div19, div5);
			append_dev(div5, div3);
			append_dev(div5, t7);
			append_dev(div5, div4);
			append_dev(div19, t9);
			append_dev(div19, div9);
			append_dev(div9, div8);
			append_dev(div8, div6);
			append_dev(div8, t11);
			append_dev(div8, div7);
			append_dev(div19, t13);
			append_dev(div19, div12);
			append_dev(div12, div10);
			append_dev(div12, t15);
			append_dev(div12, div11);
			append_dev(div19, t17);
			append_dev(div19, div15);
			append_dev(div15, div13);
			append_dev(div15, t19);
			append_dev(div15, div14);
			append_dev(div19, t21);
			append_dev(div19, div18);
			append_dev(div18, div16);
			append_dev(div18, t23);
			append_dev(div18, div17);
			append_dev(div22, t25);
			append_dev(div22, h2);
			append_dev(h2, t26);
			append_dev(div22, t27);
			append_dev(div22, div21);
			append_dev(div21, table);
			append_dev(table, thead);
			append_dev(thead, tr);
			append_dev(tr, th0);
			append_dev(tr, t29);
			append_dev(tr, th1);
			append_dev(tr, t31);
			append_dev(tr, th2);
			append_dev(tr, t33);
			append_dev(tr, th3);
			append_dev(tr, t35);
			append_dev(tr, th4);
			append_dev(tr, t37);
			append_dev(tr, th5);
			append_dev(tr, t39);
			append_dev(tr, th6);
			append_dev(table, t41);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table, null);
			}

			append_dev(div22, t42);
			if (if_block0) if_block0.m(div22, null);
			append_dev(div22, t43);
			if (if_block1) if_block1.m(div22, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*selectedCharacterClass*/ 1 && t26_value !== (t26_value = (/*selectedCharacterClass*/ ctx[0] !== null
			? "Character Class"
			: "Choose Available Class") + "")) set_data_dev(t26, t26_value);

			if (dirty & /*selectedCharacterClass, onSelectCharacterClass, availableCharacterClasses, calculatePrimeRequisiteModifierDisplay, rolledAbilities*/ 113) {
				each_value_2 = /*selectedCharacterClass*/ ctx[0] === null
				? /*availableCharacterClasses*/ ctx[5]
				: [/*selectedCharacterClass*/ ctx[0]];

				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(table, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if (/*selectedCharacterClass*/ ctx[0] !== null) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div22, t43);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*selectedCharacterClass*/ ctx[0] !== null && /*selectedAlignment*/ ctx[1] !== null) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div22, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div22);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let adjustedAbilities;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("App", slots, []);
	
	const roller = new Roll();
	const roll = dice => () => roller.roll(dice).result;
	const roll3D6 = roll("3d6");
	let selectedCharacterClass = null;
	let selectedAlignment = null;
	let abilitiesList = ["STR", "INT", "WIS", "DEX", "CON", "CHA"];

	const rolledAbilities = {
		STR: roll3D6(),
		INT: roll3D6(),
		WIS: roll3D6(),
		DEX: roll3D6(),
		CON: roll3D6(),
		CHA: roll3D6()
	};

	const availableCharacterClasses = characterClasses.all.filter(cc => cc.abilityMinimums
	? cc.abilityMinimums.reduce((soFar, curr) => soFar && rolledAbilities[curr.ability] >= curr.minimum, true)
	: true);

	const onSelectCharacterClass = name => () => {
		$$invalidate(0, selectedCharacterClass = availableCharacterClasses.find(cc => cc.name === name) || null);
	};

	const adjustableAbilities = ["STR", "INT", "WIS"];
	let adjustmentPointPool = 0;

	const decrementBaseAbility = ability => () => {
		if (adjustedAbilities[ability] > 9) {
			$$invalidate(3, adjustedAbilities[ability] -= 1, adjustedAbilities);
			$$invalidate(2, adjustmentPointPool += 0.5);
		}
	};

	const incrementBaseAbility = ability => () => {
		if (adjustedAbilities[ability] < rolledAbilities[ability] && adjustmentPointPool >= 0.5) {
			$$invalidate(3, adjustedAbilities[ability] += 1, adjustedAbilities);
			$$invalidate(2, adjustmentPointPool -= 0.5);
		}
	};

	const incrementPrimeAbility = ability => () => {
		if (adjustmentPointPool >= 1) {
			$$invalidate(3, adjustedAbilities[ability] += 1, adjustedAbilities);
			$$invalidate(2, adjustmentPointPool -= 1);
		}
	};

	const decrementPrimeAbility = ability => () => {
		if (adjustedAbilities[ability] > 9 || adjustedAbilities[ability] > rolledAbilities[ability]) {
			$$invalidate(3, adjustedAbilities[ability] -= 1, adjustedAbilities);
			$$invalidate(2, adjustmentPointPool += 1);
		}
	};

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
	});

	function select_change_handler() {
		selectedAlignment = select_value(this);
		$$invalidate(1, selectedAlignment);
	}

	$$self.$capture_state = () => ({
		Roll,
		adjust,
		difference,
		reduce,
		characterClasses,
		calculatePrimeRequisiteModifierDisplay,
		roller,
		roll,
		roll3D6,
		selectedCharacterClass,
		selectedAlignment,
		abilitiesList,
		rolledAbilities,
		availableCharacterClasses,
		onSelectCharacterClass,
		adjustableAbilities,
		adjustmentPointPool,
		decrementBaseAbility,
		incrementBaseAbility,
		incrementPrimeAbility,
		decrementPrimeAbility,
		adjustedAbilities
	});

	$$self.$inject_state = $$props => {
		if ("selectedCharacterClass" in $$props) $$invalidate(0, selectedCharacterClass = $$props.selectedCharacterClass);
		if ("selectedAlignment" in $$props) $$invalidate(1, selectedAlignment = $$props.selectedAlignment);
		if ("abilitiesList" in $$props) abilitiesList = $$props.abilitiesList;
		if ("adjustmentPointPool" in $$props) $$invalidate(2, adjustmentPointPool = $$props.adjustmentPointPool);
		if ("adjustedAbilities" in $$props) $$invalidate(3, adjustedAbilities = $$props.adjustedAbilities);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$: $$invalidate(3, adjustedAbilities = Object.assign({}, rolledAbilities));

	return [
		selectedCharacterClass,
		selectedAlignment,
		adjustmentPointPool,
		adjustedAbilities,
		rolledAbilities,
		availableCharacterClasses,
		onSelectCharacterClass,
		adjustableAbilities,
		decrementBaseAbility,
		incrementBaseAbility,
		incrementPrimeAbility,
		decrementPrimeAbility,
		select_change_handler
	];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});
	}
}

export default App;